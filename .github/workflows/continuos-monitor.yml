name: Continuous Monitoring of Dockerhub and Public ECR
on: push
#  schedule:
#    - cron:  '0 */6 * * *'

jobs:
  monitor-ecr:
    name: Monitor Dockerhub and Public ECR
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Pull an image from public ECR
        id: pull-from-ecr
        run: docker pull public.ecr.aws/xray/aws-xray-daemon:latest

      - name: Publish metrics on pulling an image
        if: ${{ always() }}
        run: |
          if [[ ${{ steps.pull-from-ecr.outcome == 'failure' }} ]]; then
            aws cloudwatch put-metric-data --metric-name PullImageFailureFromECR --dimensions test=fail --namespace MonitorDaemon --value 1 --timestamp $(date +%s)
          else
            aws cloudwatch put-metric-data --metric-name PullImageFailureFromECR --dimensions test=fail --namespace MonitorDaemon --value 0 --timestamp $(date +%s)
          fi

      - name: Run daemon image
        run: |
          docker run --name xray-daemon public.ecr.aws/xray/aws-xray-daemon:latest -n us-west-2 &
          sleep 30


      - name: Publish metrics on daemon startup
        if: ${{ always() }}
        run: |
          if [[ "$(docker container inspect -f '{{.State.Status}}' xray-daemon )" != "running" ]]; then
            aws cloudwatch put-metric-data --metric-name DaemonImageStartupFailureFromECR --dimensions test=fail --namespace MonitorDaemon --value 1 --timestamp $(date +%s)
          else
            aws cloudwatch put-metric-data --metric-name DaemonImageStartupFailureFromECR --dimensions test=fail --namespace MonitorDaemon --value 0 --timestamp $(date +%s)
          fi
